/*
-----------------------------------------------------------------------------
Filename:    project1test1.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "project1test1.h"

//-------------------------------------------------------------------------------------
project1test1::project1test1(void)
{
}
//-------------------------------------------------------------------------------------
project1test1::~project1test1(void)
{
	delete player1;
}


//-------------------------------------------------------------------------------------
void project1test1::createScene(void)
{
	tempCounter = 0;
	mBlockVector.reserve(1000);
	float blockSize = 50;
	Ogre::Vector3 blockDirection = Ogre::Vector3(0,0,1);
	for(int ix = 0; ix < 10; ix++)	{
		for(int iy = 0; iy < 10; iy++)	{
			for(int iz = 0; iz < 10; iz++){
				if(iz == 9)
				{blockDirection = Ogre::Vector3(0,0,1);}
				mBlockVector.push_back( Block(Ogre::Vector3(ix, iy, iz), Ogre::Vector3((ix * blockSize) + (blockSize / 2), (iy * blockSize) + (blockSize / 2), (iz * blockSize) + (blockSize / 2)), blockDirection ));
					Block::Block_Type BT1 = Block::Block_Type::null;
					if(iy == 0){BT1 = Block::Block_Type::streightRaill;}
					else{
						int breaker = 0;}
					mBlockVector[mBlockVector.size() - 1].initilise(mSceneMgr, BT1);
					if(mBlockVector.size() - 1 == 356){
						int breaker = 0;
					}

			}
		}
	}
	float playerSize = 50.0f;
	player1 = new Player(Ogre::Vector3(blockSize/ 2 , mBlockVector[0].getTop() + (playerSize * 0.5) + 50, blockSize / 2), mSceneMgr, mBlockVector, playerSize);

    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);

	obstacleNode = new Ogre::SceneNode(mSceneMgr, "obstacleNode");
	obstacleEntity = mSceneMgr->createEntity("Obstacle1", "Cube.mesh");
	obstacleNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
	obstacleNode->attachObject(obstacleEntity);
	obstacleNode->setPosition(Ogre::Vector3(0,100,500));

	mObstacle = new Obstacle(obstacleNode, Ogre::Vector3(0,100,500), 100, 100, 100);





	//setup FMOD


	result = FMOD::System_Create(&FMODsys);     // Create the main system object.
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" <<result;// << FMOD_ErrorString(result);
		exit(-1);
	}
 
	result = FMODsys->init(100, FMOD_INIT_NORMAL, 0);   // Initialize FMOD.
     
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;// << FMOD_ErrorString(result);
		exit(-1);
	}




	result = FMODsys->createSound("C://Program Files (x86)//FMOD SoundSystem//FMOD Programmers API Windows//examples//media//Jump.mp3", FMOD_3D, 0, &sound);
	//result = FModManager::System()->createSound("C:\Users\Conor Harney\Desktop\Year 3\project 1\project 1 - test 1\sounds\Jump.mp3", FMOD_3D, 0, &sound);
	///////////////////////////////////////////////////////////////////////////////////////
}

bool project1test1::keyPressed( const OIS::KeyEvent &arg ){
	
	if (arg.key == OIS::KC_SPACE)   // toggle visibility of advanced frame stats
    {
		if (player1->jumping == false){
			playerJumpState = "STREIGHT_UP";
			if (arg.key == OIS::KC_LEFT){playerJumpState = "LEFT_RAIL";}
			else if (arg.key == OIS::KC_RIGHT){playerJumpState = "RIGHT_RAIL";}
			tempCounter++;
			player1->setJump(playerJumpState);
			FModManager::System()->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);
		}

    }
	if (arg.key == OIS::KC_Q)
    {
		player1->setLean(std::string("->"));
	}
	if (arg.key == OIS::KC_ESCAPE)
    {
        mShutDown = true;
    }
	
	
    if (mTrayMgr->isDialogVisible()) return true;   // don't process any more keys if dialog is up

    if (arg.key == OIS::KC_F)   // toggle visibility of advanced frame stats
    {
        mTrayMgr->toggleAdvancedFrameStats();
    }
    else if (arg.key == OIS::KC_G)   // toggle visibility of even rarer debugging details
    {
        if (mDetailsPanel->getTrayLocation() == OgreBites::TL_NONE)
        {
            mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);
            mDetailsPanel->show();
        }
        else
        {
            mTrayMgr->removeWidgetFromTray(mDetailsPanel);
            mDetailsPanel->hide();
        }
    }
    else if (arg.key == OIS::KC_T)   // cycle polygon rendering mode
    {
        Ogre::String newVal;
        Ogre::TextureFilterOptions tfo;
        unsigned int aniso;

        switch (mDetailsPanel->getParamValue(9).asUTF8()[0])
        {
        case 'B':
            newVal = "Trilinear";
            tfo = Ogre::TFO_TRILINEAR;
            aniso = 1;
            break;
        case 'T':
            newVal = "Anisotropic";
            tfo = Ogre::TFO_ANISOTROPIC;
            aniso = 8;
            break;
        case 'A':
            newVal = "None";
            tfo = Ogre::TFO_NONE;
            aniso = 1;
            break;
        default:
            newVal = "Bilinear";
            tfo = Ogre::TFO_BILINEAR;
            aniso = 1;
        }

        Ogre::MaterialManager::getSingleton().setDefaultTextureFiltering(tfo);
        Ogre::MaterialManager::getSingleton().setDefaultAnisotropy(aniso);
        mDetailsPanel->setParamValue(9, newVal);
    }
    else if (arg.key == OIS::KC_R)   // cycle polygon rendering mode
    {
        Ogre::String newVal;
        Ogre::PolygonMode pm;

        switch (mCamera->getPolygonMode())
        {
        case Ogre::PM_SOLID:
            newVal = "Wireframe";
            pm = Ogre::PM_WIREFRAME;
            break;
        case Ogre::PM_WIREFRAME:
            newVal = "Points";
            pm = Ogre::PM_POINTS;
            break;
        default:
            newVal = "Solid";
            pm = Ogre::PM_SOLID;
        }

        mCamera->setPolygonMode(pm);
        mDetailsPanel->setParamValue(10, newVal);
    }
    else if(arg.key == OIS::KC_F5)   // refresh all textures
    {
        Ogre::TextureManager::getSingleton().reloadAll();
    }
    else if (arg.key == OIS::KC_SYSRQ)   // take a screenshot
    {
        mWindow->writeContentsToTimestampedFile("screenshot", ".jpg");
    }
    else if (arg.key == OIS::KC_ESCAPE)
    {
        mShutDown = true;
    }

    mCameraMan->injectKeyDown(arg);

	return true;
}

bool project1test1::keyReleased( const OIS::KeyEvent &arg )
{
    mCameraMan->injectKeyUp(arg);
	if(arg.key == OIS::KC_Q){
		player1->stopLean();
	}
    return true;
}

bool project1test1::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
    if(mWindow->isClosed())
        return false;

    if(mShutDown)
        return false;

    //Need to capture/update each device
    mKeyboard->capture();
    mMouse->capture();

	player1->update();

	////////////////////////////////////////////////////////////////////////
	if(mObstacle->IsHit(player1->pos, player1->dimentions.x, player1->dimentions.y, player1->dimentions.z))
	{
		int breaker = 0;
  		obstacleNode->setVisible(false);
	}
	/////////////////////////////////////////////////////////////////////////

	

    mTrayMgr->frameRenderingQueued(evt);

    if (!mTrayMgr->isDialogVisible())
    {
        mCameraMan->frameRenderingQueued(evt);   // if dialog isn't up, then update the camera
        if (mDetailsPanel->isVisible())   // if details panel is visible, then update its contents
        {
			float ovBY = player1->overBlock().y;
			mDetailsPanel->setParamValue(0, Ogre::StringConverter::toString(player1->pos.x));
            mDetailsPanel->setParamValue(1, Ogre::StringConverter::toString(player1->pos.y));
            mDetailsPanel->setParamValue(2, Ogre::StringConverter::toString(player1->pos.z));
			mDetailsPanel->setParamValue(4, Ogre::StringConverter::toString(player1->getOrientation().z));
            mDetailsPanel->setParamValue(5, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().x));
            mDetailsPanel->setParamValue(6, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().y));
            mDetailsPanel->setParamValue(7, Ogre::StringConverter::toString(mCamera->getDerivedOrientation().z));
        }
    }

	FModManager::System()->update();

    return true;
}







#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        project1test1 app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
