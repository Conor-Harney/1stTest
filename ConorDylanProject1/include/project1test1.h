/*
-----------------------------------------------------------------------------
Filename:    project1test1.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/
#ifndef __project1test1_h_
#define __project1test1_h_

#include "BaseApplication.h"
#include "Player.h"
#include "Obstacle.h"
#include <string>
#include "../FModManager.hpp"
#include <iostream>
#include <fstream>

#include "Particle.h"

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif
 
class project1test1 : public BaseApplication
{
public:
    project1test1(void);
    virtual ~project1test1(void);
	vector<Block> mBlockVector;
	Obstacle *mObstacle;
	Ogre::SceneNode *obstacleNode;
	Ogre::Entity * obstacleEntity;

	FMOD::System *FMODsys; //the FMOD sytem
	FMOD_RESULT result;
	static const int NUMOFSOUNDS = 4;
	FMOD::Sound *sounds[NUMOFSOUNDS];// 0:jump; 1:pop; 

	static const int NUMOFCHAN = 4;
	FMOD::Channel *channels[NUMOFCHAN];//0:music; 1:player; 2:Obstacle; 
	
	bool mute;
	void switchMute();

	int tempCounter;

	void UpdateCamera();

	void InitialiseParticles();


protected:
    virtual void createScene(void);
	virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	bool keyPressed( const OIS::KeyEvent &arg );
	bool keyReleased( const OIS::KeyEvent &arg );

private:
	Player *player1;
	
	Particle m_particles [50];
	std::string m_preppedJumpDir;// left, riht or none. set in key press, reset in key release
	Ogre::Vector3 m_camPos;
};


#endif // #ifndef __project1test1_h_
